package com.projectreddog.ecoshop.eco;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.UUID;

import net.minecraft.entity.player.EntityPlayer;

public class Eco {
	private static HashMap<UUID, Float> playerAmounts;
	private String fileName = "Funds.txt";

	public Eco() {

	}

	public void init() {
		// TODO add read code here
	}

	public void save() {
		// TODO add save code here

		// This will reference one line at a time
		String line = null;

		try {
			// FileReader reads text files in the default encoding.
			FileReader fileReader = new FileReader(fileName);

			// Always wrap FileReader in BufferedReader.
			BufferedReader bufferedReader = new BufferedReader(fileReader);

			while ((line = bufferedReader.readLine()) != null) {
				
			}

			// Always close files.
			bufferedReader.close();
		} catch (FileNotFoundException ex) {
			System.out.println("Unable to open file '" + fileName + "'");
		} catch (IOException ex) {
			System.out.println("Error reading file '" + fileName + "'");
			// Or we could just do this:
			// ex.printStackTrace();
		}

	}

	private static UUID PlayerToUUID(EntityPlayer player) {
		return player.getUniqueID();
	}

	public static float GetPlayerAmount(EntityPlayer player) {
		return GetPlayerAmount(PlayerToUUID(player));

	}

	public static float GetPlayerAmount(UUID playerUUID) {
		if (playerAmounts.containsKey(playerUUID)) {
			return playerAmounts.get(playerUUID);
		} else {
			return 0;
		}

	}

	public static boolean CheckPlayerHasFunds(EntityPlayer player, Float funds) {
		return GetPlayerAmount(player.getUniqueID()) >= funds;
	}

	public static boolean SubtractFundsFormPlayer(EntityPlayer player, Float amtToRemove) {
		if (CheckPlayerHasFunds(player, amtToRemove)) {
			// THe player has enough
			playerAmounts.put(PlayerToUUID(player), GetPlayerAmount(player) - amtToRemove);
			return true;
		} else {
			return false;
		}
	}

	public static boolean AddfundstoPlayer(EntityPlayer player, Float funds) {
		UUID tmpUUID = PlayerToUUID(player);
		if (playerAmounts.containsKey(tmpUUID)) {
			// Already in map update amount
			playerAmounts.put(tmpUUID, GetPlayerAmount(player) + funds);

		} else {
			// need to add new record to map
			playerAmounts.put(tmpUUID, +funds);
		}
		return true;
	}

}
